# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nalN9WXnCpBRtnASVAkQfYb_pArzH53p

Importing the dependecies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis"""

#loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing the first five rows of the dataset
diabetes_dataset.head()

# number of rows and columns
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic

1 --> Diabetic

---


"""

diabetes_dataset.groupby('Outcome').mean()

#separating data and labels
x = diabetes_dataset.drop(columns= 'Outcome', axis=1)
y = diabetes_dataset['Outcome']

print(x)
print(y)

"""Data Standardization"""

scaler = StandardScaler()

standardized_data = scaler.fit_transform(x)

print(standardized_data)

x = standardized_data  #x represents the data
y = diabetes_dataset['Outcome']  #y represents the model

print(x)
print(y)

"""Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Model Training"""

classifier = svm.SVC(kernel='linear')

#training the svm classifier
classifier.fit(x_train, y_train)

"""Model Evaluation

---

Accuracy Score
"""

#accuracy_score on the training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on trainig data : ', training_data_accuracy)

#accuracy_score on the test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on test data : ', test_data_accuracy)

"""Making a Predictive System"""

input_data = (5,166,72,19,175,25.8,0.587,51)

#changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0]==1):
  print('The person is Diabetic')
else:
  print('The person is not Diabetic')

